{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport objectAssign from 'element-ui/src/utils/merge';\nexport default {\n  name: 'ElForm',\n  componentName: 'ElForm',\n  provide() {\n    return {\n      elForm: this\n    };\n  },\n  props: {\n    model: Object,\n    rules: Object,\n    labelPosition: String,\n    labelWidth: String,\n    labelSuffix: {\n      type: String,\n      default: ''\n    },\n    inline: Boolean,\n    inlineMessage: Boolean,\n    statusIcon: Boolean,\n    showMessage: {\n      type: Boolean,\n      default: true\n    },\n    size: String,\n    disabled: Boolean,\n    validateOnRuleChange: {\n      type: Boolean,\n      default: true\n    },\n    hideRequiredAsterisk: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    rules() {\n      // remove then add event listeners on form-item after form rules change\n      this.fields.forEach(field => {\n        field.removeValidateEvents();\n        field.addValidateEvents();\n      });\n      if (this.validateOnRuleChange) {\n        this.validate(() => {});\n      }\n    }\n  },\n  computed: {\n    autoLabelWidth() {\n      if (!this.potentialLabelWidthArr.length) return 0;\n      const max = Math.max(...this.potentialLabelWidthArr);\n      return max ? `${max}px` : '';\n    }\n  },\n  data() {\n    return {\n      fields: [],\n      potentialLabelWidthArr: [] // use this array to calculate auto width\n    };\n  },\n\n  created() {\n    this.$on('el.form.addField', field => {\n      if (field) {\n        this.fields.push(field);\n      }\n    });\n    /* istanbul ignore next */\n    this.$on('el.form.removeField', field => {\n      if (field.prop) {\n        this.fields.splice(this.fields.indexOf(field), 1);\n      }\n    });\n  },\n  methods: {\n    resetFields() {\n      if (!this.model) {\n        console.warn('[Element Warn][Form]model is required for resetFields to work.');\n        return;\n      }\n      this.fields.forEach(field => {\n        field.resetField();\n      });\n    },\n    clearValidate(props = []) {\n      const fields = props.length ? typeof props === 'string' ? this.fields.filter(field => props === field.prop) : this.fields.filter(field => props.indexOf(field.prop) > -1) : this.fields;\n      fields.forEach(field => {\n        field.clearValidate();\n      });\n    },\n    validate(callback) {\n      if (!this.model) {\n        console.warn('[Element Warn][Form]model is required for validate to work!');\n        return;\n      }\n      let promise;\n      // if no callback, return promise\n      if (typeof callback !== 'function' && window.Promise) {\n        promise = new window.Promise((resolve, reject) => {\n          callback = function (valid) {\n            valid ? resolve(valid) : reject(valid);\n          };\n        });\n      }\n      let valid = true;\n      let count = 0;\n      // 如果需要验证的fields为空，调用验证时立刻返回callback\n      if (this.fields.length === 0 && callback) {\n        callback(true);\n      }\n      let invalidFields = {};\n      this.fields.forEach(field => {\n        field.validate('', (message, field) => {\n          if (message) {\n            valid = false;\n          }\n          invalidFields = objectAssign({}, invalidFields, field);\n          if (typeof callback === 'function' && ++count === this.fields.length) {\n            callback(valid, invalidFields);\n          }\n        });\n      });\n      if (promise) {\n        return promise;\n      }\n    },\n    validateField(props, cb) {\n      props = [].concat(props);\n      const fields = this.fields.filter(field => props.indexOf(field.prop) !== -1);\n      if (!fields.length) {\n        console.warn('[Element Warn]please pass correct props!');\n        return;\n      }\n      fields.forEach(field => {\n        field.validate('', cb);\n      });\n    },\n    getLabelWidthIndex(width) {\n      const index = this.potentialLabelWidthArr.indexOf(width);\n      // it's impossible\n      if (index === -1) {\n        throw new Error('[ElementForm]unpected width ', width);\n      }\n      return index;\n    },\n    registerLabelWidth(val, oldVal) {\n      if (val && oldVal) {\n        const index = this.getLabelWidthIndex(oldVal);\n        this.potentialLabelWidthArr.splice(index, 1, val);\n      } else if (val) {\n        this.potentialLabelWidthArr.push(val);\n      }\n    },\n    deregisterLabelWidth(val) {\n      const index = this.getLabelWidthIndex(val);\n      this.potentialLabelWidthArr.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"names":["objectAssign","name","componentName","provide","elForm","props","model","Object","rules","labelPosition","String","labelWidth","labelSuffix","type","default","inline","Boolean","inlineMessage","statusIcon","showMessage","size","disabled","validateOnRuleChange","hideRequiredAsterisk","watch","fields","forEach","field","removeValidateEvents","addValidateEvents","validate","computed","autoLabelWidth","potentialLabelWidthArr","length","max","Math","data","created","$on","push","prop","splice","indexOf","methods","resetFields","console","warn","resetField","clearValidate","filter","callback","promise","window","Promise","resolve","reject","valid","count","invalidFields","message","validateField","cb","concat","getLabelWidthIndex","width","index","Error","registerLabelWidth","val","oldVal","deregisterLabelWidth"],"sources":["node_modules/element-ui/packages/form/src/form.vue"],"sourcesContent":["<template>\n  <form class=\"el-form\" :class=\"[\n    labelPosition ? 'el-form--label-' + labelPosition : '',\n    { 'el-form--inline': inline }\n  ]\">\n    <slot></slot>\n  </form>\n</template>\n<script>\n  import objectAssign from 'element-ui/src/utils/merge';\n\n  export default {\n    name: 'ElForm',\n\n    componentName: 'ElForm',\n\n    provide() {\n      return {\n        elForm: this\n      };\n    },\n\n    props: {\n      model: Object,\n      rules: Object,\n      labelPosition: String,\n      labelWidth: String,\n      labelSuffix: {\n        type: String,\n        default: ''\n      },\n      inline: Boolean,\n      inlineMessage: Boolean,\n      statusIcon: Boolean,\n      showMessage: {\n        type: Boolean,\n        default: true\n      },\n      size: String,\n      disabled: Boolean,\n      validateOnRuleChange: {\n        type: Boolean,\n        default: true\n      },\n      hideRequiredAsterisk: {\n        type: Boolean,\n        default: false\n      }\n    },\n    watch: {\n      rules() {\n        // remove then add event listeners on form-item after form rules change\n        this.fields.forEach(field => {\n          field.removeValidateEvents();\n          field.addValidateEvents();\n        });\n\n        if (this.validateOnRuleChange) {\n          this.validate(() => {});\n        }\n      }\n    },\n    computed: {\n      autoLabelWidth() {\n        if (!this.potentialLabelWidthArr.length) return 0;\n        const max = Math.max(...this.potentialLabelWidthArr);\n        return max ? `${max}px` : '';\n      }\n    },\n    data() {\n      return {\n        fields: [],\n        potentialLabelWidthArr: [] // use this array to calculate auto width\n      };\n    },\n    created() {\n      this.$on('el.form.addField', (field) => {\n        if (field) {\n          this.fields.push(field);\n        }\n      });\n      /* istanbul ignore next */\n      this.$on('el.form.removeField', (field) => {\n        if (field.prop) {\n          this.fields.splice(this.fields.indexOf(field), 1);\n        }\n      });\n    },\n    methods: {\n      resetFields() {\n        if (!this.model) {\n          console.warn('[Element Warn][Form]model is required for resetFields to work.');\n          return;\n        }\n        this.fields.forEach(field => {\n          field.resetField();\n        });\n      },\n      clearValidate(props = []) {\n        const fields = props.length\n          ? (typeof props === 'string'\n            ? this.fields.filter(field => props === field.prop)\n            : this.fields.filter(field => props.indexOf(field.prop) > -1)\n          ) : this.fields;\n        fields.forEach(field => {\n          field.clearValidate();\n        });\n      },\n      validate(callback) {\n        if (!this.model) {\n          console.warn('[Element Warn][Form]model is required for validate to work!');\n          return;\n        }\n\n        let promise;\n        // if no callback, return promise\n        if (typeof callback !== 'function' && window.Promise) {\n          promise = new window.Promise((resolve, reject) => {\n            callback = function(valid) {\n              valid ? resolve(valid) : reject(valid);\n            };\n          });\n        }\n\n        let valid = true;\n        let count = 0;\n        // 如果需要验证的fields为空，调用验证时立刻返回callback\n        if (this.fields.length === 0 && callback) {\n          callback(true);\n        }\n        let invalidFields = {};\n        this.fields.forEach(field => {\n          field.validate('', (message, field) => {\n            if (message) {\n              valid = false;\n            }\n            invalidFields = objectAssign({}, invalidFields, field);\n            if (typeof callback === 'function' && ++count === this.fields.length) {\n              callback(valid, invalidFields);\n            }\n          });\n        });\n\n        if (promise) {\n          return promise;\n        }\n      },\n      validateField(props, cb) {\n        props = [].concat(props);\n        const fields = this.fields.filter(field => props.indexOf(field.prop) !== -1);\n        if (!fields.length) {\n          console.warn('[Element Warn]please pass correct props!');\n          return;\n        }\n\n        fields.forEach(field => {\n          field.validate('', cb);\n        });\n      },\n      getLabelWidthIndex(width) {\n        const index = this.potentialLabelWidthArr.indexOf(width);\n        // it's impossible\n        if (index === -1) {\n          throw new Error('[ElementForm]unpected width ', width);\n        }\n        return index;\n      },\n      registerLabelWidth(val, oldVal) {\n        if (val && oldVal) {\n          const index = this.getLabelWidthIndex(oldVal);\n          this.potentialLabelWidthArr.splice(index, 1, val);\n        } else if (val) {\n          this.potentialLabelWidthArr.push(val);\n        }\n      },\n      deregisterLabelWidth(val) {\n        const index = this.getLabelWidthIndex(val);\n        this.potentialLabelWidthArr.splice(index, 1);\n      }\n    }\n  };\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}